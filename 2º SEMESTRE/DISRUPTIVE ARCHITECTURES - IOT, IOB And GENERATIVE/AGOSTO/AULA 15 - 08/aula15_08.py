# -*- coding: utf-8 -*-
"""aula15_08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cVXbhltnZRi76x1sQepo0YnTId85YTiN

# primeiro exemplo
"""

x = [[0], [1], [2], [3]]
y = [0, 0, 1, 1]
from sklearn.neighbors import KNeighborsClassifier
neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(x, y)
KNeighborsClassifier(...)

print(neigh.predict_proba([[0.9]]))

"""# segundo exemplo

"""

#Import Packages
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Caminho do arquivo
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

#define o nome das colunas
header = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']

# le e carrega o arquivo para memoria
df = pd.read_csv(url, header=None, names=header)
sns.set(style="ticks", color_codes=True)

print(df)

sns.pairplot(df, hue="species", palette="husl", markers=["o", "s", "D"])

plt.show()

"""pegar 80% pra treino e 20% pra teste"""

# selecionando um sub-dataframe com os campos petal_length e petal_width,
# e outro coma variavel de classes
entradas = df[['petal_length', 'petal_width']]
classes = df['species']

print(f"formato das tabelas de dados {entradas.shape} e classes {classes.shape}")

# separamos 20% para teste
from sklearn.model_selection import train_test_split

entradas_treino, entradas_teste, classes_treino, classes_teste = train_test_split(entradas, classes, test_size=0.2)

print(f"formato das tabelas de dados {entradas_treino.shape} e classes {classes_teste.shape}")

# primeiras linhas do dataframe

entradas_treino.head()
classes_treino.head()

# importa a biblioteca
from sklearn.neighbors import KNeighborsClassifier

# cria o classificar KNN
k = 30
modelo = KNeighborsClassifier(n_neighbors=k)

# cria o modelo de machine learning
modelo.fit(entradas_treino, classes_treino)

# para criar as previsões, basta chamar o método predict()
classes_encontradas = modelo.predict(entradas_teste)
print("Predição: {}".format(classes_encontradas))
# print("Classes: {}".format(classes_teste))

# -- TESTANDO A ACURÁCIA --
# -------------------------

# para determinar a quantidade de acertos (acuracia)

from sklearn.metrics import accuracy_score
acertos = accuracy_score(classes_teste, classes_encontradas)
print("Acerto médio de classificação: ", acertos)